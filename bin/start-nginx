#!/usr/bin/env bash

psmgr=/tmp/nginx-buildpack-wait
rm -f $psmgr
mkfifo $psmgr

# Split out the Conjur URL
if [ -z "$CONJUR_RESOURCE_URL" ]; then
  echo "ERROR: CONJUR_RESOURCE_URL not set."
  exit 1
fi

export CONJUR_RESOURCE_PATH=${CONJUR_RESOURCE_URL#*//*/}
export CONJUR_LOCATION=${CONJUR_RESOURCE_URL#*//}
export CONJUR_HOST=${CONJUR_LOCATION%%/*}
echo "buildpack=nginx at=conjur-setup host=$CONJUR_HOST path=$CONJUR_RESOURCE_PATH"

# Get the certificate
echo | openssl s_client -showcerts -connect sandbox.conjur.um.pl.eu.org:443 2> /dev/null | openssl x509 > /tmp/conjur.pem
export CONJUR_CERT_ACTUAL_FINGERPRINT=`openssl x509 -fingerprint -noout -in ../sandbox/conjur-sandbox.pem | sed -e s/.*=//`
echo "buildpack=nginx at=conjur-ssl fingerprint=$CONJUR_CERT_ACTUAL_FINGERPRINT"

# Verify the fingerprint
if ! [ -z "$CONJUR_CERT_FINGERPRINT" ]; then
  if ! [ "$CONJUR_CERT_ACTUAL_FINGERPRINT" == "$CONJUR_CERT_FINGERPRINT" ]; then
    echo "ERROR: actual Conjur certificate fingerprint $CONJUR_CERT_ACTUAL_FINGERPRINT does not match CONJUR_CERT_FINGERPRINT=$CONJUR_CERT_FINGERPRINT"
    exit 1
  fi
fi

#Evaluate config to get $PORT
erb config/nginx.conf.erb > config/nginx.conf

n=1
while getopts :f option ${@:1:2}
do
        case "${option}"
        in
                f) FORCE=$OPTIND; n=$((n+1));;
        esac
done

#Initialize log directory.
mkdir -p logs/nginx
touch logs/nginx/access.log logs/nginx/error.log
echo 'buildpack=nginx at=logs-initialized'

#Start log redirection.
(
	#Redirect NGINX logs to stdout.
	tail -qF -n 0 logs/nginx/*.log
	echo 'logs' >$psmgr
) &

#Start App Server
(
	#Take the command passed to this bin and start it.
	#E.g. bin/start-nginx bundle exec unicorn -c config/unicorn.rb
        COMMAND=${@:$n}
	echo "buildpack=nginx at=start-app cmd=$COMMAND"
	$COMMAND
	echo 'app' >$psmgr
) &

if [[ -z "$FORCE" ]]
then
	FILE="/tmp/app-initialized"

	#We block on app-initialized so that when NGINX binds to $PORT
	#are app is ready for traffic.
	while [[ ! -f "$FILE" ]]
	do
		echo 'buildpack=nginx at=app-initialization'
		sleep 1
	done
	echo 'buildpack=nginx at=app-initialized'
fi

#Start NGINX
(
	#We expect nginx to run in foreground.
	#We also expect a socket to be at /tmp/nginx.socket.
	echo 'buildpack=nginx at=nginx-start'
	bin/nginx -p . -c config/nginx.conf
	echo 'nginx' >$psmgr
) &

#This read will block the process waiting on a msg to be put into the fifo.
#If any of the processes defined above should exit,
#a msg will be put into the fifo causing the read operation
#to un-block. The process putting the msg into the fifo
#will use it's process name as a msg so that we can print the offending
#process to stdout.
read exit_process <$psmgr
echo "buildpack=nginx at=exit process=$exit_process"
exit 1
