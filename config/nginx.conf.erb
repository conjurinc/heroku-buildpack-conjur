daemon off;
#Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
	use epoll;
	accept_mutex on;
	worker_connections 1024;
}

http {
        gzip on;
        gzip_comp_level 2;
        gzip_min_length 512;

	server_tokens off;

	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log logs/nginx/access.log l2met;
	error_log logs/nginx/error.log;

	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	#Must read the body in 5 seconds.
	client_body_timeout 5;

	upstream app_server {
		server unix:/tmp/nginx.socket fail_timeout=0;
 	}

	server {
		listen <%= ENV["PORT"] %>;
		server_name _;
		keepalive_timeout 5;

		location / {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_redirect off;
			proxy_pass http://app_server;
		}

		location = /conjur-authn {
      internal;
      set $conjur_privilege update;
      if ($request_method = 'GET') {
        set $conjur_privilege read;
      }
      proxy_method GET;
      proxy_ssl_verify on;
      proxy_ssl_trusted_certificate /tmp/conjur.pem;
      proxy_pass https://conjur/<%= ENV['CONJUR_RESOURCE_PATH'] %>/?check=true&privilege=$conjur_privilege;
      proxy_intercept_errors on;
      proxy_next_upstream error timeout http_403;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
      proxy_set_header X-Original-URI $request_uri;
    }
	}

  upstream conjur {
    server <%= ENV['CONJUR_HOST'] %>:443;
  }
}
